generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  salesOrders    SalesOrder[]
  purchaseOrders PurchaseOrder[]
  inventory      Inventory[]
  suppliers      Supplier[]
  customers      Customer[]

  @@map("users")
}

model Supplier {
  id            String   @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?  @map("zip_code")
  contactPerson String?  @map("contact_person")
  website       String?
  notes         String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userId        String   @map("user_id")

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventory Inventory[]
  purchaseOrders PurchaseOrder[]

  @@index([userId])
  @@index([name])
  @@index([isActive])
  @@map("suppliers")
}

model Customer {
  id            String   @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  zipCode       String?  @map("zip_code")
  contactPerson String?  @map("contact_person")
  companyType   String?  @map("company_type")
  notes         String?
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  userId        String   @map("user_id")

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  salesOrders SalesOrder[]

  @@index([userId])
  @@index([name])
  @@index([isActive])
  @@map("customers")
}

model SalesOrder {
  id            String   @id @default(uuid())
  orderNumber   String   @unique @map("order_number")
  customerName  String   @map("customer_name")
  customerEmail String   @map("customer_email")
  totalAmount   Float    @default(0.0) @map("total_amount")
  // Status as Int: 0 = PENDING, 1 = PROCESSING, 2 = SHIPPED, 3 = DELIVERED, 4 = CANCELLED
  status        Int      @default(0) @map("status")
  orderDate     DateTime @default(now()) @map("order_date") @db.Date
  createdAt     DateTime @default(now()) @map("created_at")
  userId        String   @map("user_id")
  customerId    String?  @map("customer_id")
  notes         String?

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer Customer?         @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items    SalesOrderItem[]

  @@index([userId])
  @@index([status])
  @@index([orderDate])
  @@index([customerId])
  @@map("sales_orders")
}

model SalesOrderItem {
  id           String   @id @default(uuid())
  quantity     Int
  unitPrice    Float    @map("unit_price")
  totalPrice   Float    @map("total_price")
  createdAt    DateTime @default(now()) @map("created_at")
  salesOrderId String   @map("sales_order_id")
  inventoryId  String   @map("inventory_id")

  // Relations
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventory  Inventory  @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([salesOrderId])
  @@index([inventoryId])
  @@map("sales_order_items")
}

model PurchaseOrder {
  id               String   @id @default(uuid())
  poNumber         String   @unique @map("po_number")
  supplierName     String   @map("supplier_name")
  supplierEmail    String   @map("supplier_email")
  totalAmount      Float    @default(0.0) @map("total_amount")
  // Status as Int: 0 = PENDING, 1 = APPROVED, 2 = RECEIVED, 3 = CANCELLED
  status           Int      @default(0) @map("status")
  orderDate        DateTime @default(now()) @map("order_date") @db.Date
  expectedDelivery DateTime @map("expected_delivery") @db.Date
  createdAt        DateTime @default(now()) @map("created_at")
  userId           String   @map("user_id")
  supplierId       String?  @map("supplier_id")
  notes            String?

  // Relations
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplier Supplier?           @relation(fields: [supplierId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  items    PurchaseOrderItem[]

  @@index([userId])
  @@index([status])
  @@index([orderDate])
  @@index([supplierId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String   @id @default(uuid())
  quantity        Int
  costPerUnit     Float    @map("cost_per_unit")
  totalCost       Float    @map("total_cost")
  createdAt       DateTime @default(now()) @map("created_at")
  purchaseOrderId String   @map("purchase_order_id")
  inventoryId     String   @map("inventory_id")

  // Relations
  purchaseOrder PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventory     Inventory     @relation(fields: [inventoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([purchaseOrderId])
  @@index([inventoryId])
  @@map("purchase_order_items")
}

model Inventory {
  id           String   @id @default(uuid())
  productName  String   @map("product_name")
  sku          String   @unique
  category     String   @default("Other")
  quantity     Int      @default(0)
  unitPrice    Float    @default(0.0) @map("unit_price")
  reorderLevel Int      @default(10) @map("reorder_level")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String   @map("user_id")
  supplierId   String?  @map("supplier_id")

  // Relations
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  purchaseOrderItems PurchaseOrderItem[]
  salesOrderItems    SalesOrderItem[]

  @@index([userId])
  @@index([category])
  @@index([sku])
  @@index([supplierId])
  @@map("inventory")
}